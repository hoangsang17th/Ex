code golf - Compute GPA for a set of grades - Code Golf Stack Exchange
################ Hoàng Sang ##################
The text is written in the language: en
################ Hoàng Sang ##################
Phân từ cho văn bản tiếng Việt: (Bời vì truy vấn trong trang stackoverflow có khá ít nội dung tiếng việt nên em sử dụng một đoạn văn khác để thay thế)
['Phân', 'từ', 'cho', 'văn bản', 'tiếng', 'Việt', ':', '(', 'Bời', 'vì', 'truy vấn', 'trong', 'trang', 'stackoverflow', 'có', 'khá', 'ít', 'nội dung', 'tiếng', 'việt', 'nên', 'em', 'sử dụng', 'một', 'đoạn', 'văn', 'khác', 'để', 'thay thế', ')']
################ Hoàng Sang ##################
This is the original text:

Given a set of letter grades, output the GPA (grade point average) of those grades, rounded to one decimal place.
Valid grades and their corresponding value are the following:
A = 4 grade points
A- = 3.7 grade points
B+ = 3.3 grade points
B = 3 grade points
B- = 2.7 grade points
C+ = 2.3 grade points
C = 2 grade points
C- = 1.7 grade points
D+ = 1.3 grade points
D = 1 grade point
D- = 0.7 grade points
F = 0 grade points

The formula for GPA is simply the average of the points values of the grades.   The rounding scheme used should be round half up (i.e. less than 0.05 gets rounded down to 0 and greater than or equal to 0.05 gets rounded up to 0.1).  The average should be unweighted (all inputs are treated equally).  Note that the same grade can show up multiple times in the input, in which case each instance of that grade should be a separate element in the average.
So for example, if the input was [A, B+, A, C-], the GPA is (4 + 3.3 + 4 + 1.7)/4 = 3.25, which rounds to 3.3.
The program should take as input the grades to be averaged using whatever format is convenient, such as a list, or a string with a delimiter of your choice.  Each input grade should be a single string (i.e. the letter components and +/- shouldn't be separate inputs).  You can assume the input will always contain at least one grade.  Note that grades may be repeated in the input.
Output can optionally include the ".0" suffix in the event of an integer result but this is not required.
This is code golf, so shortest solution in bytes wins.
Test cases:
[A] => 4
[F, F, F] => 0
[D+, D-] => 1
[A, B, C, D] => 2.5
[A-, B-, C-, D-] => 2.2
[A, A-, B+, B, B-] => 3.3
[A, B+, A, C-] => 3.3
[C+, C+, A, C+] => 2.7
[A, B, F, F] => 1.8



################ Hoàng Sang ##################
This is the text that has been Unicode Normalization: 


b'\nGiven a set of letter grades, output the GPA (grade point average) of those grades, rounded to one decimal place.'
b'Valid grades and their corresponding value are the following:\nA = 4 grade points\nA- = 3.7 grade points\nB+ = 3.3 grade points\nB = 3 grade points\nB- = 2.7 grade points\nC+ = 2.3 grade points\nC = 2 grade points\nC- = 1.7 grade points\nD+ = 1.3 grade points\nD = 1 grade point\nD- = 0.7 grade points\nF = 0 grade points\n\nThe formula for GPA is simply the average of the points values of the grades.'
b'The rounding scheme used should be round half up (i.e.'
b'less than 0.05 gets rounded down to 0 and greater than or equal to 0.05 gets rounded up to 0.1).'
b'The average should be unweighted (all inputs are treated equally).'
b'Note that the same grade can show up multiple times in the input, in which case each instance of that grade should be a separate element in the average.'
b'So for example, if the input was [A, B+, A, C-], the GPA is (4 + 3.3 + 4 + 1.7)/4 = 3.25, which rounds to 3.3.'
b'The program should take as input the grades to be averaged using whatever format is convenient, such as a list, or a string with a delimiter of your choice.'
b'Each input grade should be a single string (i.e.'
b"the letter components and +/- shouldn't be separate inputs)."
b'You can assume the input will always contain at least one grade.'
b'Note that grades may be repeated in the input.'
b'Output can optionally include the ".0" suffix in the event of an integer result but this is not required.'
b'This is code golf, so shortest solution in bytes wins.'
b'Test cases:\n[A] => 4\n[F, F, F] => 0\n[D+, D-] => 1\n[A, B, C, D] => 2.5\n[A-, B-, C-, D-] => 2.2\n[A, A-, B+, B, B-] => 3.3\n[A, B+, A, C-] => 3.3\n[C+, C+, A, C+] => 2.7\n[A, B, F, F] => 1.8'

################ Hoàng Sang ##################
Count and sorted stopWords: 
{'the': 16, 'of': 7, 'be': 7, 'a': 6, 'to': 6, 'should': 6, 'in': 6, 'is': 5, 'and': 3, 'up': 3, 'that': 3, 'can': 3, 'are': 2, 'for': 2, 'than': 2, 'or': 2, 'which': 2, 'as': 2, 'those': 1, 'their': 1, 'down': 1, 'all': 1, 'same': 1, 'each': 1, 'if': 1, 'was': 1, 'such': 1, 'with': 1, 'your': 1, 'will': 1, 'at': 1, 'an': 1, 'but': 1, 'this': 1, 'not': 1, 'so': 1}
################ Hoàng Sang ##################
STEMMING: 
Given: given
a: a
set: set
of: of
letter: letter
grades: grade
,: ,
output: output
the: the
GPA: gpa
(: (
grade: grade
point: point
average: averag
): )
of: of
those: those
grades: grade
,: ,
rounded: round
to: to
one: one
decimal: decim
place: place
.: .
Valid: valid
grades: grade
and: and
their: their
corresponding: correspond
value: valu
are: are
the: the
following: follow
:: :
A: a
=: =
4: 4
grade: grade
points: point
A-: a-
=: =
3.7: 3.7
grade: grade
points: point
B+: b+
=: =
3.3: 3.3
grade: grade
points: point
B: b
=: =
3: 3
grade: grade
points: point
B-: b-
=: =
2.7: 2.7
grade: grade
points: point
C+: c+
=: =
2.3: 2.3
grade: grade
points: point
C: c
=: =
2: 2
grade: grade
points: point
C-: c-
=: =
1.7: 1.7
grade: grade
points: point
D+: d+
=: =
1.3: 1.3
grade: grade
points: point
D: d
=: =
1: 1
grade: grade
point: point
D-: d-
=: =
0.7: 0.7
grade: grade
points: point
F: f
=: =
0: 0
grade: grade
points: point
The: the
formula: formula
for: for
GPA: gpa
is: is
simply: simpli
the: the
average: averag
of: of
the: the
points: point
values: valu
of: of
the: the
grades: grade
.: .
The: the
rounding: round
scheme: scheme
used: use
should: should
be: be
round: round
half: half
up: up
(: (
i.e: i.e
.: .
less: less
than: than
0.05: 0.05
gets: get
rounded: round
down: down
to: to
0: 0
and: and
greater: greater
than: than
or: or
equal: equal
to: to
0.05: 0.05
gets: get
rounded: round
up: up
to: to
0.1: 0.1
): )
.: .
The: the
average: averag
should: should
be: be
unweighted: unweight
(: (
all: all
inputs: input
are: are
treated: treat
equally: equal
): )
.: .
Note: note
that: that
the: the
same: same
grade: grade
can: can
show: show
up: up
multiple: multipl
times: time
in: in
the: the
input: input
,: ,
in: in
which: which
case: case
each: each
instance: instanc
of: of
that: that
grade: grade
should: should
be: be
a: a
separate: separ
element: element
in: in
the: the
average: averag
.: .
So: so
for: for
example: exampl
,: ,
if: if
the: the
input: input
was: wa
[: [
A: a
,: ,
B+: b+
,: ,
A: a
,: ,
C-: c-
]: ]
,: ,
the: the
GPA: gpa
is: is
(: (
4: 4
+: +
3.3: 3.3
+: +
4: 4
+: +
1.7: 1.7
): )
/4: /4
=: =
3.25: 3.25
,: ,
which: which
rounds: round
to: to
3.3: 3.3
.: .
The: the
program: program
should: should
take: take
as: as
input: input
the: the
grades: grade
to: to
be: be
averaged: averag
using: use
whatever: whatev
format: format
is: is
convenient: conveni
,: ,
such: such
as: as
a: a
list: list
,: ,
or: or
a: a
string: string
with: with
a: a
delimiter: delimit
of: of
your: your
choice: choic
.: .
Each: each
input: input
grade: grade
should: should
be: be
a: a
single: singl
string: string
(: (
i.e: i.e
.: .
the: the
letter: letter
components: compon
and: and
+/-: +/-
should: should
n't: n't
be: be
separate: separ
inputs: input
): )
.: .
You: you
can: can
assume: assum
the: the
input: input
will: will
always: alway
contain: contain
at: at
least: least
one: one
grade: grade
.: .
Note: note
that: that
grades: grade
may: may
be: be
repeated: repeat
in: in
the: the
input: input
.: .
Output: output
can: can
optionally: option
include: includ
the: the
``: ``
.0: .0
'': ''
suffix: suffix
in: in
the: the
event: event
of: of
an: an
integer: integ
result: result
but: but
this: thi
is: is
not: not
required: requir
.: .
This: thi
is: is
code: code
golf: golf
,: ,
so: so
shortest: shortest
solution: solut
in: in
bytes: byte
wins: win
.: .
Test: test
cases: case
:: :
[: [
A: a
]: ]
=: =
>: >
4: 4
[: [
F: f
,: ,
F: f
,: ,
F: f
]: ]
=: =
>: >
0: 0
[: [
D+: d+
,: ,
D-: d-
]: ]
=: =
>: >
1: 1
[: [
A: a
,: ,
B: b
,: ,
C: c
,: ,
D: d
]: ]
=: =
>: >
2.5: 2.5
[: [
A-: a-
,: ,
B-: b-
,: ,
C-: c-
,: ,
D-: d-
]: ]
=: =
>: >
2.2: 2.2
[: [
A: a
,: ,
A-: a-
,: ,
B+: b+
,: ,
B: b
,: ,
B-: b-
]: ]
=: =
>: >
3.3: 3.3
[: [
A: a
,: ,
B+: b+
,: ,
A: a
,: ,
C-: c-
]: ]
=: =
>: >
3.3: 3.3
[: [
C+: c+
,: ,
C+: c+
,: ,
A: a
,: ,
C+: c+
]: ]
=: =
>: >
2.7: 2.7
[: [
A: a
,: ,
B: b
,: ,
F: f
,: ,
F: f
]: ]
=: =
>: >
1.8: 1.8

################ Hoàng Sang ##################
LEMMATIZATION: 
Given: Given
a: a
set: set
of: of
letter: letter
grades: grade
,: ,
output: output
the: the
GPA: GPA
(: (
grade: grade
point: point
average: average
): )
of: of
those: those
grades: grade
,: ,
rounded: rounded
to: to
one: one
decimal: decimal
place: place
.: .
Valid: Valid
grades: grade
and: and
their: their
corresponding: corresponding
value: value
are: are
the: the
following: following
:: :
A: A
=: =
4: 4
grade: grade
points: point
A-: A-
=: =
3.7: 3.7
grade: grade
points: point
B+: B+
=: =
3.3: 3.3
grade: grade
points: point
B: B
=: =
3: 3
grade: grade
points: point
B-: B-
=: =
2.7: 2.7
grade: grade
points: point
C+: C+
=: =
2.3: 2.3
grade: grade
points: point
C: C
=: =
2: 2
grade: grade
points: point
C-: C-
=: =
1.7: 1.7
grade: grade
points: point
D+: D+
=: =
1.3: 1.3
grade: grade
points: point
D: D
=: =
1: 1
grade: grade
point: point
D-: D-
=: =
0.7: 0.7
grade: grade
points: point
F: F
=: =
0: 0
grade: grade
points: point
The: The
formula: formula
for: for
GPA: GPA
is: is
simply: simply
the: the
average: average
of: of
the: the
points: point
values: value
of: of
the: the
grades: grade
.: .
The: The
rounding: rounding
scheme: scheme
used: used
should: should
be: be
round: round
half: half
up: up
(: (
i.e: i.e
.: .
less: le
than: than
0.05: 0.05
gets: get
rounded: rounded
down: down
to: to
0: 0
and: and
greater: greater
than: than
or: or
equal: equal
to: to
0.05: 0.05
gets: get
rounded: rounded
up: up
to: to
0.1: 0.1
): )
.: .
The: The
average: average
should: should
be: be
unweighted: unweighted
(: (
all: all
inputs: input
are: are
treated: treated
equally: equally
): )
.: .
Note: Note
that: that
the: the
same: same
grade: grade
can: can
show: show
up: up
multiple: multiple
times: time
in: in
the: the
input: input
,: ,
in: in
which: which
case: case
each: each
instance: instance
of: of
that: that
grade: grade
should: should
be: be
a: a
separate: separate
element: element
in: in
the: the
average: average
.: .
So: So
for: for
example: example
,: ,
if: if
the: the
input: input
was: wa
[: [
A: A
,: ,
B+: B+
,: ,
A: A
,: ,
C-: C-
]: ]
,: ,
the: the
GPA: GPA
is: is
(: (
4: 4
+: +
3.3: 3.3
+: +
4: 4
+: +
1.7: 1.7
): )
/4: /4
=: =
3.25: 3.25
,: ,
which: which
rounds: round
to: to
3.3: 3.3
.: .
The: The
program: program
should: should
take: take
as: a
input: input
the: the
grades: grade
to: to
be: be
averaged: averaged
using: using
whatever: whatever
format: format
is: is
convenient: convenient
,: ,
such: such
as: a
a: a
list: list
,: ,
or: or
a: a
string: string
with: with
a: a
delimiter: delimiter
of: of
your: your
choice: choice
.: .
Each: Each
input: input
grade: grade
should: should
be: be
a: a
single: single
string: string
(: (
i.e: i.e
.: .
the: the
letter: letter
components: component
and: and
+/-: +/-
should: should
n't: n't
be: be
separate: separate
inputs: input
): )
.: .
You: You
can: can
assume: assume
the: the
input: input
will: will
always: always
contain: contain
at: at
least: least
one: one
grade: grade
.: .
Note: Note
that: that
grades: grade
may: may
be: be
repeated: repeated
in: in
the: the
input: input
.: .
Output: Output
can: can
optionally: optionally
include: include
the: the
``: ``
.0: .0
'': ''
suffix: suffix
in: in
the: the
event: event
of: of
an: an
integer: integer
result: result
but: but
this: this
is: is
not: not
required: required
.: .
This: This
is: is
code: code
golf: golf
,: ,
so: so
shortest: shortest
solution: solution
in: in
bytes: byte
wins: win
.: .
Test: Test
cases: case
:: :
[: [
A: A
]: ]
=: =
>: >
4: 4
[: [
F: F
,: ,
F: F
,: ,
F: F
]: ]
=: =
>: >
0: 0
[: [
D+: D+
,: ,
D-: D-
]: ]
=: =
>: >
1: 1
[: [
A: A
,: ,
B: B
,: ,
C: C
,: ,
D: D
]: ]
=: =
>: >
2.5: 2.5
[: [
A-: A-
,: ,
B-: B-
,: ,
C-: C-
,: ,
D-: D-
]: ]
=: =
>: >
2.2: 2.2
[: [
A: A
,: ,
A-: A-
,: ,
B+: B+
,: ,
B: B
,: ,
B-: B-
]: ]
=: =
>: >
3.3: 3.3
[: [
A: A
,: ,
B+: B+
,: ,
A: A
,: ,
C-: C-
]: ]
=: =
>: >
3.3: 3.3
[: [
C+: C+
,: ,
C+: C+
,: ,
A: A
,: ,
C+: C+
]: ]
=: =
>: >
2.7: 2.7
[: [
A: A
,: ,
B: B
,: ,
F: F
,: ,
F: F
]: ]
=: =
>: >
1.8: 1.8
