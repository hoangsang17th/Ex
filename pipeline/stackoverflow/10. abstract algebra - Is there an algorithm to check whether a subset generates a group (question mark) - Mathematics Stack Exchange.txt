abstract algebra - Is there an algorithm to check whether a subset generates a group? - Mathematics Stack Exchange
################ Hoàng Sang ##################
The text is written in the language: en
################ Hoàng Sang ##################
Phân từ cho văn bản tiếng Việt: (Bời vì truy vấn trong trang stackoverflow có khá ít nội dung tiếng việt nên em sử dụng một đoạn văn khác để thay thế)
['Phân', 'từ', 'cho', 'văn bản', 'tiếng', 'Việt', ':', '(', 'Bời', 'vì', 'truy vấn', 'trong', 'trang', 'stackoverflow', 'có', 'khá', 'ít', 'nội dung', 'tiếng', 'việt', 'nên', 'em', 'sử dụng', 'một', 'đoạn', 'văn', 'khác', 'để', 'thay thế', ')']
################ Hoàng Sang ##################
This is the original text:

I’m new to abstract algebra, so recently, I came up with a curious question: Given a group $G$ and a subset $S$ of $G$, is there a general algorithm to decide whether $\langle S \rangle = G$?
A special case which I find interesting is when $G = S_n$ (finite symmetric groups), can we still come up with such algorithm to decide this problem? If possible, is the algorithm efficient (i.e in polynomial time)?
(I think if the search space $G$ is finite, I might be able to come up with an exponential time brute force algorithm which takes $g_1, g_2 \in S$ and put $g_1g_2, g_2g_1$ back to $S$ repeatedly until there is no more new elements; not sure though if this is correct.)
A concrete formulation of this question is more like: “Does the problem of checking whether $S$ generates $G$ in P, EXP, or even decidable or not?” for $G = S_n$, for finite $G$, and for general $G$.


################ Hoàng Sang ##################
This is the text that has been Unicode Normalization: 


b'\nI\xe2\x80\x99m new to abstract algebra, so recently, I came up with a curious question: Given a group $G$ and a subset $S$ of $G$, is there a general algorithm to decide whether $\\langle S \\rangle = G$?'
b'A special case which I find interesting is when $G = S_n$ (finite symmetric groups), can we still come up with such algorithm to decide this problem?'
b'If possible, is the algorithm efficient (i.e in polynomial time)?'
b'(I think if the search space $G$ is finite, I might be able to come up with an exponential time brute force algorithm which takes $g_1, g_2 \\in S$ and put $g_1g_2, g_2g_1$ back to $S$ repeatedly until there is no more new elements; not sure though if this is correct.)'
b'A concrete formulation of this question is more like: \xe2\x80\x9cDoes the problem of checking whether $S$ generates $G$ in P, EXP, or even decidable or not?\xe2\x80\x9d for $G = S_n$, for finite $G$, and for general $G$.'

################ Hoàng Sang ##################
Count and sorted stopWords: 
{'is': 7, 'to': 5, 'a': 4, 'up': 3, 'with': 3, 'and': 3, 'of': 3, 'this': 3, 'the': 3, 'for': 3, 'there': 2, 'which': 2, 'in': 2, 'if': 2, 'more': 2, 'not': 2, 'or': 2, 'm': 1, 'so': 1, 'when': 1, 'can': 1, 'we': 1, 'such': 1, 'be': 1, 'an': 1, 'until': 1, 'no': 1}
################ Hoàng Sang ##################
STEMMING: 
I: i
’: ’
m: m
new: new
to: to
abstract: abstract
algebra: algebra
,: ,
so: so
recently: recent
,: ,
I: i
came: came
up: up
with: with
a: a
curious: curiou
question: question
:: :
Given: given
a: a
group: group
$: $
G: g
$: $
and: and
a: a
subset: subset
$: $
S: s
$: $
of: of
$: $
G: g
$: $
,: ,
is: is
there: there
a: a
general: gener
algorithm: algorithm
to: to
decide: decid
whether: whether
$: $
\langle: \langl
S: s
\rangle: \rangl
=: =
G: g
$: $
?: ?
A: a
special: special
case: case
which: which
I: i
find: find
interesting: interest
is: is
when: when
$: $
G: g
=: =
S_n: s_n
$: $
(: (
finite: finit
symmetric: symmetr
groups: group
): )
,: ,
can: can
we: we
still: still
come: come
up: up
with: with
such: such
algorithm: algorithm
to: to
decide: decid
this: thi
problem: problem
?: ?
If: if
possible: possibl
,: ,
is: is
the: the
algorithm: algorithm
efficient: effici
(: (
i.e: i.e
in: in
polynomial: polynomi
time: time
): )
?: ?
(: (
I: i
think: think
if: if
the: the
search: search
space: space
$: $
G: g
$: $
is: is
finite: finit
,: ,
I: i
might: might
be: be
able: abl
to: to
come: come
up: up
with: with
an: an
exponential: exponenti
time: time
brute: brute
force: forc
algorithm: algorithm
which: which
takes: take
$: $
g_1: g_1
,: ,
g_2: g_2
\in: \in
S: s
$: $
and: and
put: put
$: $
g_1g_2: g_1g_2
,: ,
g_2g_1: g_2g_1
$: $
back: back
to: to
$: $
S: s
$: $
repeatedly: repeatedli
until: until
there: there
is: is
no: no
more: more
new: new
elements: element
;: ;
not: not
sure: sure
though: though
if: if
this: thi
is: is
correct: correct
.: .
): )
A: a
concrete: concret
formulation: formul
of: of
this: thi
question: question
is: is
more: more
like: like
:: :
“: “
Does: doe
the: the
problem: problem
of: of
checking: check
whether: whether
$: $
S: s
$: $
generates: gener
$: $
G: g
$: $
in: in
P: p
,: ,
EXP: exp
,: ,
or: or
even: even
decidable: decid
or: or
not: not
?: ?
”: ”
for: for
$: $
G: g
=: =
S_n: s_n
$: $
,: ,
for: for
finite: finit
$: $
G: g
$: $
,: ,
and: and
for: for
general: gener
$: $
G: g
$: $
.: .

################ Hoàng Sang ##################
LEMMATIZATION: 
I: I
’: ’
m: m
new: new
to: to
abstract: abstract
algebra: algebra
,: ,
so: so
recently: recently
,: ,
I: I
came: came
up: up
with: with
a: a
curious: curious
question: question
:: :
Given: Given
a: a
group: group
$: $
G: G
$: $
and: and
a: a
subset: subset
$: $
S: S
$: $
of: of
$: $
G: G
$: $
,: ,
is: is
there: there
a: a
general: general
algorithm: algorithm
to: to
decide: decide
whether: whether
$: $
\langle: \langle
S: S
\rangle: \rangle
=: =
G: G
$: $
?: ?
A: A
special: special
case: case
which: which
I: I
find: find
interesting: interesting
is: is
when: when
$: $
G: G
=: =
S_n: S_n
$: $
(: (
finite: finite
symmetric: symmetric
groups: group
): )
,: ,
can: can
we: we
still: still
come: come
up: up
with: with
such: such
algorithm: algorithm
to: to
decide: decide
this: this
problem: problem
?: ?
If: If
possible: possible
,: ,
is: is
the: the
algorithm: algorithm
efficient: efficient
(: (
i.e: i.e
in: in
polynomial: polynomial
time: time
): )
?: ?
(: (
I: I
think: think
if: if
the: the
search: search
space: space
$: $
G: G
$: $
is: is
finite: finite
,: ,
I: I
might: might
be: be
able: able
to: to
come: come
up: up
with: with
an: an
exponential: exponential
time: time
brute: brute
force: force
algorithm: algorithm
which: which
takes: take
$: $
g_1: g_1
,: ,
g_2: g_2
\in: \in
S: S
$: $
and: and
put: put
$: $
g_1g_2: g_1g_2
,: ,
g_2g_1: g_2g_1
$: $
back: back
to: to
$: $
S: S
$: $
repeatedly: repeatedly
until: until
there: there
is: is
no: no
more: more
new: new
elements: element
;: ;
not: not
sure: sure
though: though
if: if
this: this
is: is
correct: correct
.: .
): )
A: A
concrete: concrete
formulation: formulation
of: of
this: this
question: question
is: is
more: more
like: like
:: :
“: “
Does: Does
the: the
problem: problem
of: of
checking: checking
whether: whether
$: $
S: S
$: $
generates: generates
$: $
G: G
$: $
in: in
P: P
,: ,
EXP: EXP
,: ,
or: or
even: even
decidable: decidable
or: or
not: not
?: ?
”: ”
for: for
$: $
G: G
=: =
S_n: S_n
$: $
,: ,
for: for
finite: finite
$: $
G: G
$: $
,: ,
and: and
for: for
general: general
$: $
G: G
$: $
.: .
